# Schema to experiment with. This is a few types from the
# Language Server Protocol as it is not entirely trivial.

Position:
  line: integer       # Zero based line
  character: integer  # Zero based column

Range:
  start: Position
  end: Position

Location:
  uri: string
  range: Range

LocationLink:
  targetUri: string
  targetRange: Range
  targetSelectionRange: Range

Diagnostic:
  range: Range
  source: string = "bare-lsp"
  message: string

TextDocumentIdentifier:
  uri: string

TextDocumentItem:
  <:TextDocumentIdentifier
  languageId: string
  version: integer
  text: string

TextDocumentContentChangeEvent:
  range?: Range
  text: string

# -- Initialize Request

#InitializeParams:              # We handle that as plain json

ServerInfo:
  name: string
  version: string

InitializeResult:
  capabilities: object          # Lots. We output that directly as plain json.
  serverInfo: ServerInfo

# -- Text document notifiations.
DidOpenTextDocumentParams:      # textDocument/didOpen
  textDocument: TextDocumentItem

DidChangeTextDocumentParams:    # textDocument/didChange
  textDocument: TextDocumentIdentifier
  contentChanges+: TextDocumentContentChangeEvent

DidSaveTextDocumentParams:      # textDocument/didSave
  textDocument: TextDocumentIdentifier

DidCloseTextDocumentParams:     # textDocument/didClose
  textDocument: TextDocumentIdentifier

# -- textDocument/hover
TextDocumentPositionParams:
  textDocument: TextDocumentIdentifier
  position: Position

HoverParams:
  <: TextDocumentPositionParams

MarkupContent:
  kind: string = "markdown"
  value: string

Hover:
  contents: MarkupContent
  range?: Range

# -- textDocument/documentHighlight
DocumentHighlightParams:
  <: TextDocumentPositionParams

DocumentHighlight:         # response documentHighlight is [] of this.
  range: Range
  # there is also a highlight kind to distinguish read/write

# -- textDocument/formatting
FormattingOptions:
  # Not using any of the options right now.

DocumentFormattingParams:
  textDocument: TextDocumentIdentifier
  range?: Range               # only used for textDocument/rangeFormatting
  options: FormattingOptions

TextEdit:
  range: Range
  newText: string

# -- publish Diagnostics
# this is a notification that we send server -> client
PublishDiagnosticsParams:
  uri: string
  diagnostics+: Diagnostic

# -- Code action
CodeActionParams:              # textDocument/codeAction
  #<:WorkDoneProgressParams,
  #<:PartialResultParams
  textDocument: TextDocumentIdentifier
  range: Range
  #context: CodeActionContext

WorkspaceEdit:
  #changes?: string->TextEdit+   # Map of file URI to associated edits...
  changes: object                # ...not yet supporte by jcxxgen. Let's object

# textDocument/codeAction will return an array of these (or array of Command)
CodeAction:
  title: string
  kind: string                 # Kind of change e.g quickfix, refactor, ...
  diagnostics+: Diagnostic     # What diagnostic is this referring to ?
  isPreferred: boolean = false
  edit: WorkspaceEdit

# -- textDocument/publishDiagnostics
# This is a notification that is sent from the server to the client
PublishDiagnosticParams:
  uri: string
  diagnostics+: Diagnostic

# A diagnostic and its fix. It is never used directly to send on the protocol
# but rather a convenient internal representation for publishDiagnostics
# and codeAction processing.
TitledFix:
  title: string
  edit+: TextEdit

DiagnosticFixPair:
  diagnostic: Diagnostic
  fixes+: TitledFix     # A choice of fixes for this problem
